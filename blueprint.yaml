tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1.1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.6/plugin.yaml

inputs:
  bigip_image:
    type: string
    default: 'CentOS 7.3 (1611)'

  bigip_flavor:
    type: string
    default: dc1.1x1

  web_image:
    description: >
      Image to be used when launching agent VM's
    type: string
    default: 'CentOS 7.3 (1611)'

  web_flavor:
    description: >
      Flavor of the agent VM's
    type: string
    default: dc1.1x1

  agent_user:
    description: >
      User for connecting to agent VM's
    type: string
    default: centos

  key_name:
    default: master

  private_key_path:
    default: /etc/cloudify/isaac_gs.pem
    type: string

  AdminNetwork_network_name:
    default: default

  internal_network_name:
    default: f5-default

  app_security_group:
    default: default

  bigip_security_group:
    default: default

  agents_security_group:
    default: cloudify-4.0-agents

  keystone_username:
    default: ''
    type: string

  keystone_password:
    default: ''
    type: string

  keystone_tenant_name:
    default: ''
    type: string

  keystone_url:
    default: ''
    type: string

  region:
    default: ''
    type: string

dsl_definitions:
  openstack_configuration: &openstack_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

  agent_config: &agent_config
    user: { get_input: agent_user }
    key: { get_property: [ key, private_key_path ] }

node_types:
  host:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      openstack_config:
        default: *openstack_config
      management_network_name:
        default: { get_input: AdminNetwork_network_name }
      collectors:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          # Needed until JIRA issue OPENSTACK-38 is resolved.
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              default:
                security_groups:
                  - { get_input: agents_security_group }
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              default:
                interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              default: { get_property: [SELF, collectors]}

node_templates:

  ansible:
    type: cloudify.nodes.Root
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host

  application:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/provision.py
          inputs:
            networks: { get_attribute: [ application_host, networks ]}
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host

  application_host:
    type: host
    properties:
      image: { get_input: web_image }
      flavor: { get_input: web_flavor }
      agent_config: *agent_config
      collectors:
        CPUCollector: {}
        MemoryCollector: {}
        LoadAverageCollector: {}
        NetworkCollector: {}
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: agents_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: application_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: AdminNetwork_network
        type: cloudify.relationships.connected_to
      - target: internal_network
        type: cloudify.relationships.connected_to

  bigip_ansible:
    type: cloudify.nodes.Root
    relationships:
      - type: cloudify.relationships.contained_in
        target: bigip_host
      - type: cloudify.relationships.depends_on
        target: application

  bigip_host:
    type: host
    properties:
      image: { get_input: bigip_image }
      flavor: { get_input: bigip_flavor }
      agent_config: *agent_config
      collectors:
        CPUCollector:
          config:
            percore: true
        MemoryCollector: {}
        LoadAverageCollector: {}
        NetworkCollector: {}
        ProcessResourcesCollector:
          config:
            unit: B
            measure_collector_time: true
            cpu_interval: 0.5
            process:
              tmm:
                name: ^tmm
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: agents_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: bigip_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: AdminNetwork_network
        type: cloudify.relationships.connected_to
      - target: internal_network
        type: cloudify.relationships.connected_to

  agents_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: agents_security_group }

  application_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: app_security_group }

  bigip_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: bigip_security_group }

  internal_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: internal_network_name }

  AdminNetwork_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: AdminNetwork_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

outputs:
  Web endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ application_host, ip ] }
  bigip endpoint:
    description: BIGIP mgmt ip
    value:
      ip_address: { get_attribute: [ bigip_host, ip ] }

groups:
  app:
    members: [application_host, bigip_host]

  scale_up_group:
    members: [application_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 6
          service_selector: .*.application_host..*..cpu.total.system
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: app

  scale_down_group:
    members: [application_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*.application_host..*..cpu.total.system
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: app

policies:
  app_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [app]

policy_types:
  scale_policy_type:
    source: policies/scale.clj
    properties:
      policy_operates_on_group:
        default: true
      service_selector:
        description: regular expression that selects the metric to be measured
        default: ".*"
      moving_window_size:
        description: the moving window for individual sources in secs
        default: 10
      scale_threshold:
        description: the value to trigger scaling over aggregrated moving values
      scale_limit:
        description: scaling limit
        default: 10
      scale_direction:
        description: scale up ('<') or scale down ('>')
        default: '<'
      cooldown_time:
        description: the time to wait before evaluating again after a scale
        default: 60
